syntax = "proto3";

package dfs_service;

service DFSService {

    // Add your service calls here

    // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
    rpc StoreFile(stream fileSegment) returns (fileResponse);

    // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server
    rpc FetchFile(file) returns (stream fileSegment);

    // 3. REQUIRED (Parts 1 & 2): A method to list all files on the server
    rpc ListFiles(listFilesRequest) returns (files);

    // 4. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
    rpc FileStatus(file) returns (fileStatus);

    // 5. REQUIRED (Part 2 only): A method to request a write lock from the server
    rpc RequestWriteLock(file) returns (writeLock);

    // 6. REQUIRED (Part 2 only): A method named CallbackList to handle asynchronous file listing requests
    //                            from a client. This method should return a listing of files along with their
    //                            attribute information. The expected attribute information should include name,
    //                            size, modified time, and creation time.
    rpc CallbackList(file) returns (files);

    // 7. REQUIRED (Part 2 only): A method to delete a file from the server
    rpc DeleteFile(file) returns (fileResponse);

    // 8. Any other methods you deem necessary to complete the tasks of this assignment
    //rpc SendHeader(fileHeader) returns (fileHeader);


}

// Add your message types here
// message fileHeader{
//     string file_name = 1;
//     //string name = 2; // needed? https://piazza.com/class/ky4oj8pjzic6wh?cid=1255
//     int64 modified = 2; // for Store function
//     uint32 check_sum = 3;
//     string client_id = 4;
// }


message file{
    string file_name = 1;
    string name = 2; // needed? https://piazza.com/class/ky4oj8pjzic6wh?cid=1255
    uint32 check_sum = 3;
    string client_id = 4;
}

message fileSegment{
    bytes data = 1;
    string file_name = 2; // for Store function
    int64 modified = 3; // for Store function
    string client_id = 4;
    uint32 check_sum = 5; // for ?
}

message fileResponse{
    string file_name = 1;
    int64 modified = 2;
}

message listFilesRequest{
    // no args needed
}

message files{
    repeated fileStatus file = 1;
}

message fileStatus{

    // attribute info
    string file_name = 1;
    int64 file_size = 2;
    int64 created = 3;
    int64 modified = 4;
    uint32 check_sum = 5;
    
}

message writeLock{
    // no args needed
}